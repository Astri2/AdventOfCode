[[[[[[[[[[print(len(visited_places)) for _ in [[[[[[[[visited_places.add(rope[-1][0]) for _ in [[[set_var(rope[i],(sum[0]//2,sum[1]//2)) for sum in [sum_co(rope[i-1][0],rope[i][0])]] if(rope[i-1][0][0] == rope[i][0][0] or rope[i-1][0][1] == rope[i][0][1]) else [set_var(rope[i],sum_co(rope[i][0],dir)) for dir in [(1 if rope[i-1][0][0] > rope[i][0][0] else -1, 1 if rope[i-1][0][1] > rope[i][0][1] else -1)]] for i in range(1,len(rope)) if not(abs(rope[i-1][0][0]-rope[i][0][0]) <= 1 and abs(rope[i-1][0][1]-rope[i][0][1]) <= 1)]]] for _ in [set_var(rope[0],sum_co(rope[0][0],direction))]] for _ in range(dist)] for dist in [int(split[1])]]for direction in [directions[split[0]]]] for split in [line.split()]]for line in open(f"D9/input{'_test' if TESTING else ''}.txt",'r').read().splitlines()]]] for _ in [visited_places.add((0,0))]] for visited_places in [set()]] for directions in [{'R':(1,0),'L':(-1,0),'U':(0,1),'D':(0,-1)}]] for rope in [[[(0,0)] for _ in range(rope_length)]]] for rope_length in [2 if STAGE == 1 else 10]] for sum_co in [lambda p1,p2: (p1[0]+p2[0],p1[1]+p2[1])]] for set_var in [lambda t,x : [t.append(x) for _ in [t.clear()]]]] for TESTING in [False]] for STAGE in [2]]